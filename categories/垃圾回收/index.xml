<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>垃圾回收 on steve lannister</title>
        <link>https://jhrsya.github.io/categories/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
        <description>Recent content in 垃圾回收 on steve lannister</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 07 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jhrsya.github.io/categories/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>垃圾回收</title>
        <link>https://jhrsya.github.io/p/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
        <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jhrsya.github.io/p/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
        <description>&lt;h1 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h1&gt;
&lt;h2 id=&#34;java&#34;&gt;java&lt;/h2&gt;
&lt;h3 id=&#34;java虚拟机中的内存划分&#34;&gt;java虚拟机中的内存划分&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://fvector.oss-cn-hangzhou.aliyuncs.com/202305071150166.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;java垃圾回收&#34;&gt;java垃圾回收&lt;/h2&gt;
&lt;h3 id=&#34;引用计数算法&#34;&gt;引用计数算法&lt;/h3&gt;
&lt;p&gt;给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器值为0的对象就是不能再被使用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用计数法无法解决对象之间循环引用的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;可达性分析算法&#34;&gt;可达性分析算法&lt;/h3&gt;
&lt;p&gt;这个算法的基本思想是通过一系列称为GC Roots的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时（用图论的话来说，就是从GC Roots到这个对象不可达），则证明此对象是不可用的。
&lt;img src=&#34;https://fvector.oss-cn-hangzhou.aliyuncs.com/202305071442654.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在java语言中，可作为GC Roots的对象包括下面几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机栈(帧栈中的本地变量表)中引用的对象&lt;/li&gt;
&lt;li&gt;方法区中类静态属性引用的变量&lt;/li&gt;
&lt;li&gt;方法区中常量引用的对象&lt;/li&gt;
&lt;li&gt;本地方法栈中(即一般说的Native方法)引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java中引用的概念&#34;&gt;java中引用的概念&lt;/h4&gt;
&lt;p&gt;java对引用的概念进行了扩充：分为强引用，软引用，弱引用，虚引用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强引用就是在程序代码中普遍存在的，类似&lt;code&gt;Object obj = new Object()&lt;/code&gt;这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。&lt;/li&gt;
&lt;li&gt;软引用是用来描述一些还有用但是非必须得对象。&lt;/li&gt;
&lt;li&gt;弱引用也是用来描述非必须得对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱应用关联的对象。&lt;/li&gt;
&lt;li&gt;虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存事件造成影响，也无法通过虚引用来获得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被垃圾收集器回收时收到一个系统通知。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
